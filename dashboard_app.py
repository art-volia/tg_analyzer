# dashboard_app.py ‚Äî Streamlit-–ø–∞–Ω–µ–ª—å TG Analyzer (Postgres, heartbeat, –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–ª—é—á–∏)
# –û–±–Ω–æ–≤–ª–µ–Ω–æ: —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ key= —É –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤, –±–µ–∑ experimental_rerun, —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–æ–º

import os
import sys
import math
import json
import time
import yaml
import asyncio
import subprocess
from datetime import datetime, timedelta
from pathlib import Path

import streamlit as st
import pandas as pd
from dotenv import load_dotenv

# SQLModel / SQLAlchemy
from sqlalchemy import func, delete
from sqlmodel import select

# Telethon (–¥–ª—è –≤–∫–ª–∞–¥–∫–∏ ¬´–î–∏–∞–ª–æ–≥–∏¬ª)
from telethon import TelegramClient
from telethon.tl.types import User as TLUser, Channel, Chat as TLChat

# –ü—Ä–æ–µ–∫—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from db import (
    get_session, Account, User, Chat, Message, Cursor, Window,
    AccountChat, ChatBot, DirectPeer, ChatMeta, ChatTopic, ChatLanguage
)

# ------------------------------------------------------------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/–ø—É—Ç–∏
# ------------------------------------------------------------------------------
CFG_PATH = "config.yaml"
ENV_PATH = ".env"
RUNTIME_DIR = Path("runtime")
RUNTIME_DIR.mkdir(parents=True, exist_ok=True)
HEARTBEAT_PATH = RUNTIME_DIR / "worker_heartbeat.json"


# ------------------------------------------------------------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# ------------------------------------------------------------------------------
def is_worker_process_running() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ worker.py –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å."""
    try:
        out = subprocess.run(
            ["pgrep", "-f", r"python .*worker.py"],
            stdout=subprocess.PIPE,
            stderr=subprocess.DEVNULL,
            text=True,
        )
        return out.returncode == 0
    except Exception:
        return False


def read_heartbeat():
    try:
        if HEARTBEAT_PATH.exists():
            return json.loads(HEARTBEAT_PATH.read_text(encoding="utf-8"))
    except Exception:
        pass
    return None


def load_cfg() -> dict:
    if not os.path.exists(CFG_PATH):
        # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            "chats": [],
            "limits": {
                "batch_size_range": [90, 180],
                "pause_between_batches_sec": [1.5, 3.5],
                "pause_between_chats_sec": [6, 15],
                "micro_pause_every_n_msgs": [30, 50],
                "micro_pause_ms": [200, 500],
            },
            "behavior": {
                "incremental": True,
                "use_takeout_for_bulk_exports": False,
                "warm_up_mode": True,
                "include_dialogs": False,
            },
            "storage": {
                "log_path": "logs/app.log",
            },
        }
    with open(CFG_PATH, "r", encoding="utf-8") as f:
        return yaml.safe_load(f) or {}


def save_cfg(cfg: dict) -> None:
    with open(CFG_PATH, "w", encoding="utf-8") as f:
        yaml.safe_dump(cfg, f, allow_unicode=True, sort_keys=False)


def load_env() -> dict:
    load_dotenv(ENV_PATH)
    return {
        "API_ID": os.getenv("API_ID", ""),
        "API_HASH": os.getenv("API_HASH", ""),
        "SESSION_NAME": os.getenv("SESSION_NAME", "research_account"),
    }


def save_env(values: dict) -> None:
    lines = []
    for k in ("API_ID", "API_HASH", "SESSION_NAME"):
        v = str(values.get(k, "")).strip()
        lines.append(f"{k}={v}\n")
    with open(ENV_PATH, "w", encoding="utf-8") as f:
        f.writelines(lines)


# ------------------------------------------------------------------------------
# –î–∏–∞–ª–æ–≥–∏ (–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑ Telegram)
# ------------------------------------------------------------------------------
async def _fetch_dialogs(session_name: str, api_id: int, api_hash: str, limit: int = 500):
    items = []
    async with TelegramClient(session_name, api_id, api_hash) as client:
        async for dlg in client.iter_dialogs(limit=limit):
            ent = dlg.entity
            title = getattr(ent, "title", None) or getattr(ent, "username", None) or str(ent.id)
            username = getattr(ent, "username", None)
            is_group = isinstance(ent, (TLChat,)) or getattr(ent, "megagroup", False)
            is_channel = isinstance(ent, Channel) and not getattr(ent, "megagroup", False)
            items.append({
                "title": title,
                "id": ent.id,
                "username": username,
                "–≤–∏–¥": "–∫–∞–Ω–∞–ª" if is_channel else ("–≥—Ä—É–ø–ø–∞" if is_group else ("–ª–∏—á–∫–∞" if isinstance(ent, TLUser) else "–¥—Ä—É–≥–æ–µ")),
            })
    return items


def fetch_dialogs_sync(session_name: str, api_id: int, api_hash: str, limit: int = 500):
    return asyncio.run(_fetch_dialogs(session_name, api_id, api_hash, limit))


# ------------------------------------------------------------------------------
# –°—Ç—Ä–∞–Ω–∏—Ü–∞
# ------------------------------------------------------------------------------
st.set_page_config(page_title="TG Analyzer Dashboard", layout="wide")
st.title("TG Analyzer ‚Äî –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

tabs = st.tabs([
    "–°–æ—Å—Ç–æ—è–Ω–∏–µ",        # 0
    "–õ–æ–≥–∏",             # 1
    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",        # 2
    "–î–∏–∞–ª–æ–≥–∏",          # 3
    "–ü—Ä–æ—Å–º–æ—Ç—Ä –ë–î",      # 4
    "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —á–∞—Ç–æ–≤", # 5
    "–û–∫–Ω–∞/–ö—É—Ä—Å–æ—Ä—ã",     # 6
    "ENV (.env)",       # 7
    "–≠–∫—Å–ø–æ—Ä—Ç",          # 8
])

# ------------------------------------------------------------------------------
# 0) –°–û–°–¢–û–Ø–ù–ò–ï
# ------------------------------------------------------------------------------
with tabs[0]:
    st.subheader("–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–∞")
    cfg = load_cfg()
    log_path = cfg.get("storage", {}).get("log_path", "logs/app.log")

    col_run, col_stop, col_refresh = st.columns([1, 1, 1])
    with col_run:
        run_btn = st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å worker", use_container_width=True, key="state_run")
    with col_stop:
        stop_btn = st.button("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å worker", use_container_width=True, key="state_stop")
    with col_refresh:
        refresh_btn = st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", use_container_width=True, key="state_refresh")

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º
    if run_btn:
        # –º—è–≥–∫–∏–π —Ä–µ—Å—Ç–∞—Ä—Ç
        os.system("pkill -f 'python worker.py' || true")
        time.sleep(0.3)
        cmd = f"nohup {sys.executable} worker.py > worker.log 2>&1 &"
        os.system(cmd)
        time.sleep(0.8)
        st.rerun()

    if stop_btn:
        os.system("pkill -f 'python worker.py' || true")
        time.sleep(0.6)
        st.rerun()

    if refresh_btn:
        st.rerun()

    # –°—Ç–∞—Ç—É—Å
    status_col1, status_col2, status_col3 = st.columns([1, 1, 2])
    hb = read_heartbeat()
    proc = is_worker_process_running()

    with status_col1:
        if proc:
            st.success("Worker: RUNNING", icon="‚úÖ")
        else:
            st.error("Worker: STOPPED", icon="‚õî")

    with status_col2:
        if hb:
            try:
                last_tick = datetime.fromisoformat(hb["last_tick"])
                secs_ago = (datetime.now().astimezone(last_tick.tzinfo) - last_tick).total_seconds()
                st.metric("–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∏–∫ (—Å–µ–∫ –Ω–∞–∑–∞–¥)", f"{int(secs_ago)}")
            except Exception:
                st.metric("–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∏–∫ (—Å–µ–∫ –Ω–∞–∑–∞–¥)", "‚Äî")
        else:
            st.metric("–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∏–∫ (—Å–µ–∫ –Ω–∞–∑–∞–¥)", "‚Äî")

    with status_col3:
        if hb:
            st.caption(
                f"PID: {hb.get('pid')} ‚Ä¢ mode: {hb.get('mode')} ‚Ä¢ last_action: {hb.get('last_action')} ‚Ä¢ "
                f"last_chat_id: {hb.get('last_chat_id')} ‚Ä¢ saved(last batch): {hb.get('saved_messages_total')}"
            )
        else:
            st.caption("–ù–µ—Ç heartbeat ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–µ worker –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.")

    # –ú–µ—Ç—Ä–∏–∫–∏ –ë–î
    st.divider()
    try:
        with get_session() as sess:
            total_msgs = sess.exec(select(func.count()).select_from(Message)).one()
            total_chats = sess.exec(select(func.count()).select_from(Chat)).one()
            total_users = sess.exec(select(func.count()).select_from(User)).one()
            last_dt = sess.exec(select(Message.date).order_by(Message.date.desc()).limit(1)).first()
            channels_cnt = sess.exec(select(func.count()).select_from(Chat).where(Chat.is_channel == True)).one()
            groups_cnt = sess.exec(select(func.count()).select_from(Chat).where(Chat.is_group == True)).one()

        c_m1, c_m2, c_m3, c_m4 = st.columns(4)
        c_m1.metric("–°–æ–æ–±—â–µ–Ω–∏–π", f"{int(total_msgs):,}".replace(",", " "))
        c_m2.metric("–ß–∞—Ç–æ–≤ (–≤—Å–µ–≥–æ)", f"{int(total_chats):,}".replace(",", " "), help=f"–ö–∞–Ω–∞–ª—ã: {channels_cnt} ‚Ä¢ –ì—Ä—É–ø–ø—ã: {groups_cnt}")
        c_m3.metric("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", f"{int(total_users):,}".replace(",", " "))
        c_m4.metric("–•—Ä–∞–Ω–∏–ª–∏—â–µ", "Postgres")

        if last_dt:
            st.caption(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ: {last_dt}")
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ë–î: {e}")

    # –•–≤–æ—Å—Ç –ª–æ–≥–∞ –≤–æ—Ä–∫–µ—Ä–∞
    st.divider()
    st.caption("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞ –≤–æ—Ä–∫–µ—Ä–∞:")
    try:
        if os.path.exists(log_path):
            with open(log_path, "r", encoding="utf-8", errors="ignore") as f:
                lines = f.readlines()[-200:]
            st.code("".join(lines) or "(–ª–æ–≥ –ø—É—Å—Ç)", language="log")
        else:
            st.info(f"–õ–æ–≥-—Ñ–∞–π–ª –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω: {log_path}")
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥: {e}")

# ------------------------------------------------------------------------------
# 1) –õ–û–ì–ò
# ------------------------------------------------------------------------------
with tabs[1]:
    st.subheader("–õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    cfg = load_cfg()
    log_path = cfg.get("storage", {}).get("log_path", "logs/app.log")
    follow = st.toggle("–°–ª–µ–¥–∏—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (1—Å–µ–∫)", value=False, key="logs_follow")
    placeholder = st.empty()

    def render_log():
        try:
            if os.path.exists(log_path):
                with open(log_path, "r", encoding="utf-8", errors="ignore") as f:
                    lines = f.readlines()[-500:]
                placeholder.code("".join(lines) or "(–ª–æ–≥ –ø—É—Å—Ç)", language="log")
            else:
                placeholder.info(f"–õ–æ–≥-—Ñ–∞–π–ª –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω: {log_path}")
        except Exception as e:
            placeholder.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}")

    render_log()
    if follow:
        for _ in range(30):  # ~30 —Å–µ–∫—É–Ω–¥
            render_log()
            time.sleep(1)

# ------------------------------------------------------------------------------
# 2) –ù–ê–°–¢–†–û–ô–ö–ò (config.yaml)
# ------------------------------------------------------------------------------

with tabs[2]:
    st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ (config.yaml)")

    
    # === –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ä–º—ã –∏–∑ config.yaml ===
    def _cfg_to_state():
        cfg = load_cfg()
        st.session_state["cfg_chats"] = "\n".join(map(str, cfg.get("chats", [])))
        st.session_state["cfg_batch_lo"] = int(cfg["limits"]["batch_size_range"][0])
        st.session_state["cfg_batch_hi"] = int(cfg["limits"]["batch_size_range"][1])
        st.session_state["cfg_pbb_lo"] = float(cfg["limits"]["pause_between_batches_sec"][0])
        st.session_state["cfg_pbb_hi"] = float(cfg["limits"]["pause_between_batches_sec"][1])
        st.session_state["cfg_pchat_lo"] = float(cfg["limits"]["pause_between_chats_sec"][0])
        st.session_state["cfg_pchat_hi"] = float(cfg["limits"]["pause_between_chats_sec"][1])
        st.session_state["cfg_incremental"] = bool(cfg["behavior"].get("incremental", True))
        st.session_state["cfg_include_dialogs"] = bool(cfg["behavior"].get("include_dialogs", False))
        st.session_state["cfg_takeout"] = bool(cfg["behavior"].get("use_takeout_for_bulk_exports", False))
        st.session_state["cfg_warmup"] = bool(cfg["behavior"].get("warm_up_mode", True))

    if "cfg_state_inited" not in st.session_state:
        _cfg_to_state()
        st.session_state["cfg_state_inited"] = True

    col_reload_1, col_reload_2 = st.columns([1,2])
    with col_reload_1:
        if st.button("‚ü≥ –û–±–Ω–æ–≤–∏—Ç—å –∏–∑ config.yaml", key="btn_reload_cfg",
                     help="–ü–µ—Ä–µ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è —Ñ–æ—Ä–º—ã –∏–∑ —Ñ–∞–π–ª–∞. –ù–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã."):
            _cfg_to_state()
            st.rerun()
    with col_reload_2:
        try:
            from pathlib import Path as _P
            from datetime import datetime
            ts = datetime.fromtimestamp(_P(CFG_PATH).stat().st_mtime).strftime("%Y-%m-%d %H:%M:%S")
            st.caption(f"–§–∞–π–ª: {CFG_PATH} ‚Ä¢ –æ–±–Ω–æ–≤–ª—ë–Ω: {ts}")
        except Exception:
            st.caption("–§–∞–π–ª config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω")
# —á–∏—Ç–∞–µ–º cfg –∏ mtime
    cfg = load_cfg()
    try:
        cfg_mtime = Path(CFG_PATH).stat().st_mtime
    except Exception:
        cfg_mtime = 0
    nonce = str(int(cfg_mtime))  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Å—É—Ñ—Ñ–∏–∫—Å key

    # –ö–Ω–æ–ø–∫–∞ ¬´–æ–±–Ω–æ–≤–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞¬ª ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä
    row_reload_1, row_reload_2 = st.columns([1,2])
    with row_reload_1:
        if st.button("‚ü≥ –û–±–Ω–æ–≤–∏—Ç—å –∏–∑ config.yaml", key=f"btn_reload_cfg_{nonce}",
                     help="–ü–µ—Ä–µ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è —Ñ–æ—Ä–º—ã –∏–∑ —Ñ–∞–π–ª–∞. –ù–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ø–µ—Ä–µ–∑–∞—Ç—Ä—É—Ç—Å—è."):
            st.rerun()
    with row_reload_2:
        try:
            ts = datetime.fromtimestamp(Path(CFG_PATH).stat().st_mtime).strftime('%Y-%m-%d %H:%M:%S')
            st.caption(f"–§–∞–π–ª: {CFG_PATH} ‚Ä¢ –æ–±–Ω–æ–≤–ª—ë–Ω: {ts}")
        except Exception:
            st.caption("–§–∞–π–ª config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω")

    st.write("**–ß–∞—Ç—ã** (—Å–ø–∏—Å–æ–∫ @username –∏–ª–∏ —á–∏—Å–ª–æ–≤—ã—Ö ID):")
    chats = cfg.get("chats", []) or []
    chats_text = st.text_area("chats (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ)",
        value="\n".join(map(str, chats)),
        height=140,
        key=f"chats_text_{nonce}",
        help=(
            "–°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤/–∫–∞–Ω–∞–ª–æ–≤. –î–æ–ø—É—Å—Ç–∏–º—ã: @username "
            "(–ø—É–±–ª–∏—á–Ω—ã–µ) –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π chat_id (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö, –≥–¥–µ –∞–∫–∫–∞—É–Ω—Ç "
            "—É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç). –û–¥–∏–Ω –ø—É–Ω–∫—Ç ‚Äî –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞. –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è "
            "—Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ config.yaml –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–æ—Ä–∫–µ—Ä."
        )
    )

    st.write("**–õ–∏–º–∏—Ç—ã –∏ –ø–∞—É–∑—ã**:")
    col_a, col_b = st.columns(2)
    with col_a:
        batch_lo = st.number_input(
            "batch min", 10, 1000,
            value=int(cfg["limits"]["batch_size_range"][0]),
            key=f"batch_lo_{nonce}",
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞—á–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏."
        )
        pbb_lo = st.number_input(
            "pause_between_batches min (—Å–µ–∫)", 0.0, 60.0,
            value=float(cfg["limits"]["pause_between_batches_sec"][0]),
            key=f"pbb_lo_{nonce}",
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏—Å—Ç–æ—Ä–∏–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)."
        )
        pchat_lo = st.number_input(
            "pause_between_chats min (—Å–µ–∫)", 0.0, 120.0,
            value=float(cfg["limits"]["pause_between_chats_sec"][0]),
            key=f"pchat_lo_{nonce}",
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏."
        )
    with col_b:
        batch_hi = st.number_input(
            "batch max", 10, 2000,
            value=int(cfg["limits"]["batch_size_range"][1]),
            key=f"batch_hi_{nonce}",
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞—á–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."
        )
        pbb_hi = st.number_input(
            "pause_between_batches max (—Å–µ–∫)", 0.0, 120.0,
            value=float(cfg["limits"]["pause_between_batches_sec"][1]),
            key=f"pbb_hi_{nonce}",
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏—Å—Ç–æ—Ä–∏–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)."
        )
        pchat_hi = st.number_input(
            "pause_between_chats max (—Å–µ–∫)", 0.0, 300.0,
            value=float(cfg["limits"]["pause_between_chats_sec"][1]),
            key=f"pchat_hi_{nonce}",
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏."
        )

    st.write("**–ü–æ–≤–µ–¥–µ–Ω–∏–µ**:")
    col_c, col_d = st.columns(2)
    with col_c:
        incremental = st.toggle(
            "–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–±–æ—Ä",
            value=bool(cfg["behavior"].get("incremental", True)),
            key=f"incremental_{nonce}",
            help="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."
        )
        include_dialogs = st.toggle(
            "–°–æ–±–∏—Ä–∞—Ç—å –ª–∏—á–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏",
            value=bool(cfg["behavior"].get("include_dialogs", False)),
            key=f"include_dialogs_{nonce}",
            help="–°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –∏–∑ –ª–∏—á–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤."
        )
    with col_d:
        takeout = st.toggle(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å takeout –¥–ª—è –±—ç–∫–∞–ø–∞",
            value=bool(cfg["behavior"].get("use_takeout_for_bulk_exports", False)),
            key=f"takeout_{nonce}",
            help="Telegram Takeout –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤—ã–≥—Ä—É–∑–æ–∫."
        )
        warmup = st.toggle(
            "–†–µ–∂–∏–º –ø—Ä–æ–≥—Ä–µ–≤–∞",
            value=bool(cfg["behavior"].get("warm_up_mode", True)),
            key=f"warmup_{nonce}",
            help="–©–∞–¥—è—â–∏–π —Ä–µ–∂–∏–º –≤ –ø–µ—Ä–≤—ã–µ –¥–Ω–∏."
        )

    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å config.yaml", type="primary", key=f"save_cfg_{nonce}",
                 help="–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª config.yaml."):
        new_cfg = dict(cfg)  # –∫–æ–ø–∏—è
        new_cfg.setdefault("limits", dict(cfg.get("limits", {})))
        new_cfg.setdefault("behavior", dict(cfg.get("behavior", {})))

        new_cfg["chats"] = [x.strip() for x in chats_text.splitlines() if x.strip()]
        new_cfg["limits"]["batch_size_range"] = [int(batch_lo), int(batch_hi)]
        new_cfg["limits"]["pause_between_batches_sec"] = [float(pbb_lo), float(pbb_hi)]
        new_cfg["limits"]["pause_between_chats_sec"] = [float(pchat_lo), float(pchat_hi)]
        new_cfg["behavior"]["incremental"] = bool(incremental)
        new_cfg["behavior"]["include_dialogs"] = bool(include_dialogs)
        new_cfg["behavior"]["use_takeout_for_bulk_exports"] = bool(takeout)
        new_cfg["behavior"]["warm_up_mode"] = bool(warmup)
        save_cfg(new_cfg)
        st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ ¬´‚ü≥ –û–±–Ω–æ–≤–∏—Ç—å –∏–∑ config.yaml¬ª, —á—Ç–æ–±—ã –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª.")
with tabs[3]:
    st.subheader("–î–∏–∞–ª–æ–≥–∏ (—á–∞—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã –∏–∑ Telegram)")

    env_vals = load_env()
    try:
        api_id = int(env_vals.get("API_ID", "0") or "0")
    except Exception:
        api_id = 0
    api_hash = env_vals.get("API_HASH", "")
    session_name = env_vals.get("SESSION_NAME", "research_account")

    if not api_id or not api_hash:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ API_ID –∏ API_HASH –≤–æ –≤–∫–ª–∞–¥–∫–µ ‚ÄòENV (.env)‚Äô.")
    else:
        col1, col2 = st.columns([1, 1])
        with col1:
            limit = st.number_input(
                "–°–∫–æ–ª—å–∫–æ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–¥—Ç—è–Ω—É—Ç—å",
                min_value=50, max_value=2000, value=500, step=50,
                key="dlg_limit",
            )
        with col2:
            go = st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏–∑ Telegram", use_container_width=True, key="dlg_refresh")

        if go:
            with st.spinner("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram –∏ —á–∏—Ç–∞–µ–º –¥–∏–∞–ª–æ–≥–∏..."):
                try:
                    dialogs = fetch_dialogs_sync(session_name, api_id, api_hash, limit=int(limit))
                    st.session_state["dialogs_cache"] = dialogs
                    st.success(f"–ù–∞–π–¥–µ–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: {len(dialogs)}")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")

        dialogs = st.session_state.get("dialogs_cache", [])
        if dialogs:
            st.caption("–û—Ç–º–µ—Ç—å—Ç–µ –≥–∞–ª–æ—á–∫–∞–º–∏, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ config.yaml ‚Üí –∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ")
            df = pd.DataFrame(dialogs)
            options = [f"{row['–≤–∏–¥']} | {row['title']} | id={row['id']} | @{row['username'] or '-'}" for _, row in df.iterrows()]
            selected = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã", options=options, default=[], key="dlg_selected")

            if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤ config.yaml", type="primary", key="dlg_add_to_cfg"):
                to_add = []
                for item in selected:
                    parts = item.split("|")
                    id_part = [p for p in parts if "id=" in p][0].strip()
                    id_val = int(id_part.replace("id=", "").strip())
                    uname_part = [p for p in parts if "@" in p][-1].strip()
                    uname = uname_part[1:] if uname_part.startswith("@") else None
                    if uname and uname != "-":
                        to_add.append(f"@{uname}")
                    else:
                        to_add.append(id_val)
                cfg = load_cfg()
                existing = cfg.get("chats", []) or []
                for x in to_add:
                    if x and x not in existing:
                        existing.append(x)
                cfg["chats"] = existing
                save_cfg(cfg)
                st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ config.yaml: {len(to_add)}. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–æ—Ä–∫–µ—Ä –≤–æ –≤–∫–ª–∞–¥–∫–µ ‚Äò–°–æ—Å—Ç–æ—è–Ω–∏–µ‚Äô.")
        else:
            st.info("–°–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –ø—É—Å—Ç. –ù–∞–∂–º–∏—Ç–µ ‚Äò–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏–∑ Telegram‚Äô.")

# ------------------------------------------------------------------------------
# 4) –ü–†–û–°–ú–û–¢–† –ë–î (—Å–æ–æ–±—â–µ–Ω–∏—è)
# ------------------------------------------------------------------------------
with tabs[4]:
    st.subheader("–ü—Ä–æ—Å–º–æ—Ç—Ä –ë–î: —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Ç–∞–º")

    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    st.session_state.setdefault("browser_page", 1)

    # –§–∏–ª—å—Ç—Ä—ã
    col_top1, col_top2, col_top3, col_top4 = st.columns([1, 1, 1, 1])
    with col_top1:
        kind = st.selectbox("–¢–∏–ø", ["–ª—é–±–æ–π", "–∫–∞–Ω–∞–ª", "–≥—Ä—É–ø–ø–∞", "–ª–∏—á–∫–∞"], key="db_kind")
    with col_top2:
        date_from = st.date_input("–° –¥–∞—Ç—ã", value=None, key="db_date_from")
    with col_top3:
        date_to = st.date_input("–ü–æ –¥–∞—Ç—É", value=None, key="db_date_to")
    with col_top4:
        per_page = st.number_input("–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É", min_value=10, max_value=500, value=100, step=10, key="db_per_page")

    q = st.text_input("–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É (LIKE, –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞)", key="db_text_query")

    with get_session() as sess:
        chats_q = select(Chat).order_by(Chat.title)
        chats = sess.exec(chats_q).all()
    chat_map = {f"{c.title or c.chat_id} (id={c.chat_id})": c.chat_id for c in chats}
    chat_label = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç", ["(–Ω–µ –≤—ã–±—Ä–∞–Ω)"] + list(chat_map.keys()), key="db_chat_select")
    chat_id = chat_map.get(chat_label) if chat_label != "(–Ω–µ –≤—ã–±—Ä–∞–Ω)" else None

    st.divider()
    page = st.number_input("–°—Ç—Ä–∞–Ω–∏—Ü–∞", min_value=1, value=int(st.session_state.get("browser_page", 1)), step=1, key="db_page")
    if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", key="db_apply_filters"):
        st.session_state["browser_page"] = int(page)

    # WHERE-—É—Å–ª–æ–≤–∏—è
    where = []
    if chat_id:
        where.append(Message.chat_id == chat_id)

    if kind != "–ª—é–±–æ–π":
        if kind == "–∫–∞–Ω–∞–ª":
            where.append(Chat.is_channel == True)
        elif kind == "–≥—Ä—É–ø–ø–∞":
            where.append(Chat.is_group == True)
        elif kind == "–ª–∏—á–∫–∞":
            where.append((Chat.is_channel == False) & (Chat.is_group == False))

    def to_iso(d):
        return datetime(d.year, d.month, d.day)

    if date_from:
        where.append(Message.date >= to_iso(date_from).isoformat())
    if date_to:
        where.append(Message.date < (to_iso(date_to) + timedelta(days=1)).isoformat())

    if q:
        where.append(func.lower(Message.text).like(f"%{q.lower()}%"))

    offset = (int(st.session_state.get("browser_page", 1)) - 1) * int(per_page)

    with get_session() as sess:
        base = select(
            Message.message_id,
            Message.chat_id,
            Message.user_id,
            Message.date,
            Message.text
        ).join(Chat, Chat.chat_id == Message.chat_id)

        if where:
            from sqlmodel import and_  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
            base = base.where(and_(*where))

        total = sess.exec(select(func.count()).select_from(base.subquery())).one()
        page_stmt = base.order_by(Message.date.desc()).limit(int(per_page)).offset(int(offset))
        rows = sess.exec(page_stmt).all()

        # –ø–æ–¥—Ç—è–Ω—É—Ç—å –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        uids = [r.user_id for r in rows if r.user_id is not None]
        users = {}
        if uids:
            urows = sess.exec(select(User.user_id, User.username, User.first_name, User.last_name).where(User.user_id.in_(uids))).all()
            for uid, un, fn, ln in urows:
                users[uid] = un or " ".join(filter(None, [fn, ln])) or str(uid)

    st.caption(f"–ù–∞–π–¥–µ–Ω–æ: {total} —Å–æ–æ–±—â–µ–Ω–∏–π. –°—Ç—Ä–∞–Ω–∏—Ü: {max(1, math.ceil(total/int(per_page)))}")

    if rows:
        df = pd.DataFrame([
            {
                "–¥–∞—Ç–∞": r.date,
                "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": users.get(r.user_id, r.user_id),
                "chat_id": r.chat_id,
                "msg_id": r.message_id,
                "—Ç–µ–∫—Å—Ç": r.text,
            }
            for r in rows
        ])
        st.dataframe(df, use_container_width=True)

        c1, c2, c3 = st.columns([1, 1, 1])
        total_pages = max(1, math.ceil(total / int(per_page)))
        with c1:
            if st.button("¬´ –ù–∞–∑–∞–¥", disabled=int(st.session_state["browser_page"]) <= 1, key="db_prev"):
                st.session_state["browser_page"] -= 1
                st.rerun()
        with c2:
            st.write(f"–°—Ç—Ä. {st.session_state['browser_page']} –∏–∑ {total_pages}")
        with c3:
            if st.button("–í–ø–µ—Ä—ë–¥ ¬ª", disabled=int(st.session_state["browser_page"]) >= total_pages, key="db_next"):
                pass
            else:
                if int(st.session_state["browser_page"]) < total_pages:
                    st.session_state["browser_page"] += 1
                    st.rerun()
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")

# ------------------------------------------------------------------------------
# 5) –°–ü–†–ê–í–û–ß–ù–ò–ö –ß–ê–¢–û–í (–ë–î-–º–µ—Ç–∞)
# ------------------------------------------------------------------------------
with tabs[5]:
    st.subheader("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —á–∞—Ç–æ–≤")

    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    with col1:
        f_type = st.selectbox("–¢–∏–ø", ["–ª—é–±–æ–π", "–∫–∞–Ω–∞–ª", "–≥—Ä—É–ø–ø–∞", "–ª–∏—á–∫–∞"], key="dict_type")
    with col2:
        f_country = st.text_input("–°—Ç—Ä–∞–Ω–∞", key="dict_country")
    with col3:
        f_lang = st.text_input("–Ø–∑—ã–∫", key="dict_lang")

    with get_session() as sess:
        q = select(Chat)
        if f_type != "–ª—é–±–æ–π":
            if f_type == "–∫–∞–Ω–∞–ª":
                q = q.where(Chat.is_channel == True)
            elif f_type == "–≥—Ä—É–ø–ø–∞":
                q = q.where(Chat.is_group == True)
            elif f_type == "–ª–∏—á–∫–∞":
                q = q.where((Chat.is_channel == False) & (Chat.is_group == False))

        chats = sess.exec(q).all()

        rows = []
        for c in chats:
            meta = sess.exec(select(ChatMeta).where(ChatMeta.chat_id == c.chat_id)).first()
            topics = sess.exec(select(ChatTopic.topic).where(ChatTopic.chat_id == c.chat_id)).all()
            langs = sess.exec(select(ChatLanguage.language).where(ChatLanguage.chat_id == c.chat_id)).all()

            country = meta.country if meta else ""
            topics_str = ", ".join([t[0] for t in topics]) if topics else ""
            langs_str = ", ".join([l[0] for l in langs]) if langs else ""

            if f_country and f_country.lower() not in country.lower():
                continue
            if f_lang and (not langs_str or f_lang.lower() not in langs_str.lower()):
                continue

            rows.append({
                "chat_id": c.chat_id,
                "title": c.title,
                "—Ç–∏–ø": "–∫–∞–Ω–∞–ª" if c.is_channel else ("–≥—Ä—É–ø–ø–∞" if c.is_group else "–ª–∏—á–∫–∞"),
                "—Å—Ç—Ä–∞–Ω–∞": country,
                "—Ç–µ–º—ã": topics_str,
                "—è–∑—ã–∫–∏": langs_str
            })

        if rows:
            df = pd.DataFrame(rows)
            st.dataframe(df, use_container_width=True)

            st.divider()
            st.subheader("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ —á–∞—Ç–∞")

            # —Å–ø–∏—Å–æ–∫ label: "chat_id ‚Äî title"
            ids = [r["chat_id"] for r in rows]
            id_to_title = {r["chat_id"]: r.get("title") for r in rows}
            options = [f'{cid} ‚Äî {id_to_title.get(cid) or ""}'.strip() for cid in ids]

            sel_label = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ chat_id", ["-"] + options, key="dict_chat_id")
            if sel_label != "-":
                # —Ä–∞—Å–ø–∞—Ä—Å–∏–º chat_id –∏–∑ "123456 ‚Äî Title"
                try:
                    selected_id = int(sel_label.split("‚Äî", 1)[0].strip())
                except Exception:
                    selected_id = None

                if selected_id is not None:
                    chat = sess.get(Chat, selected_id)
                    if chat:
                        meta = sess.exec(select(ChatMeta).where(ChatMeta.chat_id == chat.chat_id)).first()
                        topics = sess.exec(select(ChatTopic.topic).where(ChatTopic.chat_id == chat.chat_id)).all()
                        langs  = sess.exec(select(ChatLanguage.language).where(ChatLanguage.chat_id == chat.chat_id)).all()

                        in_country = st.text_input("–°—Ç—Ä–∞–Ω–∞", value=(meta.country if meta else ""), key="dict_edit_country")
                        in_topics  = st.text_input("–¢–µ–º—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", value=", ".join([t[0] for t in topics]), key="dict_edit_topics")
                        in_langs   = st.text_input("–Ø–∑—ã–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", value=", ".join([l[0] for l in langs]), key="dict_edit_langs")

                        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", key="dict_save"):
                            # 1) country (upsert)
                            if not meta:
                                meta = ChatMeta(chat_id=chat.chat_id, country=in_country.strip() or None)
                            else:
                                meta.country = in_country.strip() or None
                            sess.add(meta)
                            sess.commit()

                            # 2) topics ‚Äî —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ, –∑–∞—Ç–µ–º –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
                            sess.exec(delete(ChatTopic).where(ChatTopic.chat_id == chat.chat_id))
                            for t in [x.strip() for x in in_topics.split(",") if x.strip()]:
                                sess.add(ChatTopic(chat_id=chat.chat_id, topic=t))
                            sess.commit()

                            # 3) languages ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
                            sess.exec(delete(ChatLanguage).where(ChatLanguage.chat_id == chat.chat_id))
                            for l in [x.strip() for x in in_langs.split(",") if x.strip()]:
                                sess.add(ChatLanguage(chat_id=chat.chat_id, language=l))
                            sess.commit()

                            st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î.")
                            st.rerun()
        else:
            st.info("–ù–µ—Ç —á–∞—Ç–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –∏–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞.")

# ------------------------------------------------------------------------------
# 6) –û–ö–ù–ê/–ö–£–†–°–û–†–´
# ------------------------------------------------------------------------------
with tabs[6]:
    st.subheader("–û–∫–Ω–∞/–ö—É—Ä—Å–æ—Ä—ã (—Ç–µ—Ö–¥–∞–Ω–Ω—ã–µ)")

    with get_session() as sess:
        cursors = sess.exec(select(Cursor)).all()
        windows = sess.exec(select(Window)).all()

    if cursors:
        st.write("Cursor:")
        df_c = pd.DataFrame([{
            "chat_id": c.chat_id,
            "oldest_id": c.oldest_fetched_id,
            "newest_id": c.newest_fetched_id,
        } for c in cursors])
        st.dataframe(df_c, use_container_width=True)
    else:
        st.info("Cursor –ø—É—Å—Ç–æ")

    st.divider()

    if windows:
        st.write("Window:")
        df_w = pd.DataFrame([{
            "id": w.id, "chat_id": w.chat_id, "min_id": w.min_id, "max_id": w.max_id
        } for w in windows])
        st.dataframe(df_w, use_container_width=True)
    else:
        st.info("Window –ø—É—Å—Ç–æ")

# ------------------------------------------------------------------------------
# 7) ENV (.env)
# ------------------------------------------------------------------------------
with tabs[7]:
    st.subheader("ENV (.env)")
    env_vals = load_env()

    api_id = st.text_input("API_ID", value=str(env_vals.get("API_ID", "")), key="env_api_id")
    api_hash = st.text_input("API_HASH", value=env_vals.get("API_HASH", ""), key="env_api_hash")
    session_name = st.text_input("SESSION_NAME", value=env_vals.get("SESSION_NAME", "research_account"), key="env_session_name")

    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å .env", type="primary", key="env_save"):
        save_env({"API_ID": api_id, "API_HASH": api_hash, "SESSION_NAME": session_name})
        st.success(".env —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞–Ω–µ–ª—å –∏–ª–∏ –≤–æ—Ä–∫–µ—Ä, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å.")

# ------------------------------------------------------------------------------
# 8) –≠–ö–°–ü–û–†–¢ (CSV)
# ------------------------------------------------------------------------------
with tabs[8]:
    st.subheader("–≠–∫—Å–ø–æ—Ä—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ CSV")

    limit = st.number_input("–°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –≤—ã–≥—Ä—É–∑–∏—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ)", min_value=10, max_value=100000, value=1000, step=10, key="export_limit")
    if st.button("–°–∫–∞—á–∞—Ç—å CSV", key="export_btn"):
        with get_session() as sess:
            q = select(Message).order_by(Message.date.desc()).limit(int(limit))
            rows = sess.exec(q).all()
        df = pd.DataFrame([
            {
                "chat_id": r.chat_id,
                "message_id": r.message_id,
                "user_id": r.user_id,
                "date": r.date,
                "text": r.text,
            } for r in rows
        ])
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å messages.csv",
            data=df.to_csv(index=False).encode("utf-8"),
            file_name="messages.csv",
            mime="text/csv",
            key="export_download_btn",
            help="CSV –≤ UTF-8. –û—Ç–∫—Ä–æ–π –≤ Excel/Google Sheets.",
        )
